2.1(1.1):

/***********************************************************************
 * File                	 	: 2.1_subroutines.txt
 * Author Name          	: Jyotsna Surve
 * Desc                	 	: Program to calculate units consumed 
				  and net amount.
 * Version            	 	: 3.0
 * Last Modified Date   	: 24-August-2017
 * Change Description   	: Description about the changes implemented
 ***********************************************************************/
BEGIN
	DECLARE userid,fixcharge AS INTEGER
	DECLARE username AS STRING
	DECLARE last_month_reading, current_month_reading, units_consumed, net_amount AS DECIMAL
	DECLARE CONSTANT multiplier=1.15
	INITIALIZE fixcharge=100
	PROMPT "enter userid:" AND STORE IN userid
	PROMPT "enter username:" AND STORE IN username
	PROMPT "enter last month month meter reading:" AND STORE IN last_month_reading
	PROMPT "enter current month meter reading:" AND STORE IN current_month_reading
	units_consumed=calculate_units_consumed(last_month_reading,current_month_reading) 
	net_amount=calculate_net_amount(units_consumed,multiplier,fixcharge) 
	DISPLAY "user ID:", userid
	DISPLAY "user name:", username
	DISPLAY "user consumed:", units_consumed
	DISPLAY "net amount:", net_amount
END


/*********************************************************************
* Module Name         	: calculate_units_consumed()
* Input Parameters      : last_month_reading, current_month_reading
* Return Type         	: DECIMAL
* Author              	: Jyotsna Surve
* Creation Date      	: 24-August-2017
* Description        	: calculating units consumed.
 *********************************************************************/

DECIMAL SUB calculate_units_consumed(DECIMAL last_month_reading, DECIMAL current_month_reading)
	DECLARE units_consumed AS DECIMAL
	CALCULATE units_consumed=(last_month_reading)-(current_month_reading)
	RETURN units_consumed
END SUB


/*********************************************************************
* Module Name         	: calculate_net_amount()
* Input Parameters      : units_consumed, multiplier, fixcharge
* Return Type         	: DECIMAL
* Author              	: Jyotsna Surve
* Creation Date      	: 24-August-2017
* Description        	: calculating net amount.
 *********************************************************************/
DECIMAL SUB calculate_net_amount(DECIMAL units_consumed,DECIMAL multiplier,DECIMAL fixcharge)
	DECLARE net_amount AS DECIMAL
	CALCULATE net_amount=units_consumed * multiplier + fixcharge
	RETURN net_amount
END SUB




2.1(1.2):

/*********************************************************************
 * File                	 	: 2.1_subroutines.txt
 * Author Name          	: Jyotsna Surve
 * Desc                	 	: Program to check organization of employee.
 * Version            	 	: 2.0
 * Last Modified Date   	: 24-August-2017
 * Change Description   	: program is done using subroutines
 *********************************************************************/
BEGIN
	DECLARE experience AS INTEGER
	DECLARE TAG_COLOR AS STRING
	PROMPT "enter the experience" AND STORE IN experience
	TAG_COLOR=get_tagcolor(experience)
	DISPLAY "Tag Color is:",TAG_COLOR
END


/*********************************************************************
* Module Name         	: get_tagcolor()
* Input Parameters      : experience
* Return Type         	: STRING
* Author              	: Jyotsna Surve
* Creation Date      	: 24-August-2017
* Description        	: find tagcolor
 *********************************************************************/
	
STRING SUB get_tagcolor(INTEGER experience)
	DECLARE tagcolor AS STRING
	IF (experience<0 AND experience>50)
		DISPLAY "enter the valid year"
	ELSE IF (experience=0 AND experience<3)
		tagcolor="BLUE"
	ELSE IF (experience<5)
		tagcolor="GREY"
	ELSE IF (experience<10)
		tagcolor="YELLOW"
	ELSE
		tagcolor="RED"

	END IF
	RETURN tagcolor
END SUB




2.1(1.3):

/***********************************************************************
 * File                	 	: 2.1_subroutines.txt
 * Author Name          	: Jyotsna Surve
 * Desc                	 	: Program to print fibonacci series.
 * Version            	 	: 2.0
 * Last Modified Date   	: 02-september-2017
 * Change Description   	: Description about the changes implemented
 ***********************************************************************/

BEGIN
	DECLARE lastno,firstno,secondno AS INTERGER
	
	PROMPT "Enter the last number in series" AND STORE IN lastno
	DISPLAY(firstno)
	DISPLAY(secondno)
	CALL calculate_next_no(lastno)
	
END


/*********************************************************************
* Module Name         	: calculate_next_no()
* Input Parameters      : lastno,sum
* Author              	: Jyotsna Surve
* Creation Date      	: 24-August-2017
* Description        	: print fibonacci series
 *********************************************************************/

SUB calculate_next_no(INTEGER lastno)
	DECLARE firstno,secondno,count,sum AS INTEGER
	INITIALIZE sum TO 0
	INITIALIZE firstno TO 0
	INITIALIZE secondno TO 1
	
	FOR count 0 TO lastno
		sum=firstno+secondno
		DISPLAY(sum)
		firstno=secondno
		secondno=sum
		count=count+1	
		
	END FOR
END




2.1(1.4):

/************************************************************************
 * File                	 	: 2.1_subroutines.txt
 * Author Name          	: Jyotsna Surve
 * Desc                	 	: Program to check whether given number is 
				  armstrong number or not.
 * Version            	 	: 2.0
 * Last Modified Date   	: 02-september-2017
 * Change Description   	: program is done using subroutines
 ************************************************************************/

BEGIN
	DECLARE number,result AS INTEGER

	PROMPT "Enter the number" AND STORE IN number
	
	result=check_armstrong(number)


	IF(result EQUALS TO number)
	  DISPLAY("It is an Armstrong number")
	ELSE
	  DISPLAY("It is not an Armstrong number")
END


/*********************************************************************
* Module Name         	: check_armstrong()
* Input Parameters      : number
* Return Type         	: INTEGER
* Author              	: Jyotsna Surve
* Creation Date      	: 02-september-2017
* Description        	: check if the number is armstrong or not
 *********************************************************************/
INTEGER SUB check_armstrong(INTEGER number)
	
	DECLARE  temp, remainder, sum AS INTEGER
	DECLARE CONSTANT divisor AS 10
	INITIALIZE sum=0
	temp=number
	WHILE temp is NOT EQUAL TO 0
	  CALCULATE remainder=temp % divisor
	  CALCULATE sum=sum + (remainder*remainder*remainder)
	  CALCULATE temp=temp/divisor
	END WHILE
	RETURN(sum)
END SUB




2.1(1.5):

/*********************************************************************
 * File                	 	: 2.1_subroutines.txt
 * Author Name          	: Jyotsna Surve
 * Desc                	 	: Program to convert a binary number to decimal. 
 * Version            	 	: 2.0
 * Last Modified Date   	: 02-september-2017
 * Change Description   	: Description about the changes implemented
 *********************************************************************/

BEGIN
	DECLARE num,binary,conversion AS INTEGER
	PROMPT "Enter the binary value" AND STORE IN num
	binary=num
	conversion=convert(num)
	
	DISPLAY("The binary value is:",binary)
	DISPLAY("The decimal value is:",decimal)
END


/*******************************************************************
* Module Name         	: convert()
* Input Parameters      : num
* Return Type         	: INTEGER
* Author              	: Jyotsna Surve
* Creation Date      	: 02-september-2017
* Description        	: converting binary number to decimal
 *******************************************************************/
INTEGER SUB convert(INTEGER num)
	
	DECLARE decimal,base,rem AS INTEGER
	INITIALIZE decimal AS O AND base AS 1
	DECLARE CONSTANT div AS 10 AND  base_constant AS 2
	
	
	WHILE num is greater than 0
		CALCULATE rem=num%div
			  decimal=decimal+rem*base
			  num=num/div
			  base=base_constant
	END WHILE
	RETURNS (decimal)
END




2.1(1.6):

/************************************************************************
 * File                	 	: 2.1_subroutines.txt
 * Author Name          	: Jyotsna Surve
 * Desc                	 	: Program to display smallest number in an array.
 * Version            	 	: 2.0
 * Last Modified Date   	: 24-August-2017
 * Change Description   	: program is done using subroutines
 ************************************************************************/

BEGIN
	DECLARE numbers[10] AS INTEGER ARRAY
	DECLARE index,smallest AS INTEGER
	PRINT "Enter 10 numbers"
	FOR index=1 TO 9
		ACCEPT numbers[index]
	END FOR
	smallest=getsmallest(numbers[])
	DISPLAY("Smallest number is:",smallest)
END


/*******************************************************************
* Module Name         	: getsmallest()
* Input Parameters      : numbers[]
* Return Type         	: INTEGER
* Author              	: Jyotsna Surve
* Creation Date      	: 02-september-2017
* Description        	: subroutine to determine smallest number in array
 *******************************************************************/

INTEGER SUB getsmallest(INTEGER ARRAY numbers[])
	DECLARE min,index AS INTEGER
	INITIALIZE min=number[0]
	FOR index=1 TO 9
		IF(number[index]<min)
		min=number[index]
		END IF
	END FOR
	RETURN min
END SUB


/************************************************************************
 * File                	 	: 2.1_subroutines.txt
 * Author Name          	: Jyotsna Surve
 * Desc                	 	: Program to determine odd and even numbers.
 * Version            	 	: 2.0
 * Last Modified Date   	: 24-August-2017
 * Change Description   	: program is done using subroutines
 ************************************************************************/


BEGIN
	DECLARE num[100] AS INTEGER ARRAY
	DECLARE listlength,index AS INTEGER
	
	PROMPT "Enter the number of elements" AND STORE IN listlength
	FOR index 0 TO listlength-1
		ACCEPT num[index]
		index=index+1
	END FOR
	CALL sortEvenOdd(num[],listlength)
END

/*********************************************************************
* Module Name         	: sortEvenOdd()
* Input Parameters      : num[],listlength
* Return Type         	: 
* Author              	: Jyotsna Surve
* Creation Date      	: 24-August-2017
* Description        	: subroutine to sort array elements in even and odd
 *********************************************************************/

SUB sortEvenOdd(INTEGER ARRAY num[], INTEGER listlength)
	
	DECLARE odd[100],even[100] AS INTEGER ARRAY
	DECLARE index,oddlength,evenlength AS INTEGER
	INITIALIZE oddlength AND evenlength AS 0
	
	FOR index 0 TO listlength-1
		IF(num[index] % 2 IS EQAUL TO 0)
			even[evenlength]=num[index]
			CALCULATE evenlength=evenlength+1
			CALCULATE index=index+1
		ELSE
			odd[oddlength]=num[index]
			CALCULATE oddlength=oddlength+1
			CALCULATE index=index+1
		END IF
	END FOR

	DISPLAY("List of even numbers is:")
	FOR index 0 TO evenlength
		PRINT even[index]
	END FOR
	
	
	DISPLAY("List of odd numbers is:")
	FOR index 0 TO oddlength
		PRINT odd[index]
	END FOR
END SUB




2.1(1.7):

/**************************************************************************
 * File                	 	: 2.1_subroutines.txt
 * Author Name          	: Jyotsna Surve
 * Desc                	 	: Program to calculate total price of product
 * Version            	 	: 2.0
 * Last Modified Date   	: 24-August-2017
 * Change Description   	: Description about the changes implemented
 **************************************************************************/

BEGIN
	DECLARE product_price, total_price AS DECIMAL
	DECLARE CONSTANT tax_rate=0.56
	PROMPT "Enter the price of your product" AND STORE IN product_price
	total_price=calculate_total_price(product_price, tax_rate)
	DISPLAY "Total price of product is:",total_price
END


/*********************************************************************
* Module Name         	: calculate_total_price()
* Input Parameters      : product_price,tax_rate
* Return Type         	: DECIMAL
* Author              	: Jyotsna Surve
* Creation Date      	: 02-september-2017
* Description        	: subroutine to calculate total price
 *********************************************************************/	

DECIMAL SUB calculate_total_price(DECIMAL product_price,DECIMAL tax_rate)
		DECLARE total_price AS DECIMAL
		CALCULATE total_price=product_price*tax_rate
		RETURN total_price
END SUB